--- a/board/xilinx/zynq/board.c
+++ b/board/xilinx/zynq/board.c
@@ -28,6 +28,9 @@
 static xilinx_desc fpga100 = XILINX_XC7Z100_DESC(0x100);
 #endif
 
+/* Added by MYIR for MYS-XC7Z010 */
+extern int myir_board_init(void);
+
 int board_init(void)
 {
 #if defined(CONFIG_ENV_IS_IN_EEPROM) && !defined(CONFIG_SPL_BUILD)
@@ -68,6 +71,8 @@
     (defined(CONFIG_SPL_FPGA_SUPPORT) && defined(CONFIG_SPL_BUILD))
 	fpga_init();
 	fpga_add(fpga_xilinx, &fpga);
+	/* Added by MYIR for MYS-XC7Z010 */
+	myir_board_init();
 #endif
 #if defined(CONFIG_ENV_IS_IN_EEPROM) && !defined(CONFIG_SPL_BUILD)
 	if (eeprom_write(CONFIG_SYS_I2C_MUX_ADDR, 0, &eepromsel, 1))
--- a/board/xilinx/zynq/Makefile
+++ b/board/xilinx/zynq/Makefile
@@ -7,6 +7,9 @@
 
 obj-y	:= board.o
 
+# Added by MYIR for MYS-XC7Z010
+obj-y	+= myir_init.o
+
 hw-platform-y :=$(shell echo $(CONFIG_DEFAULT_DEVICE_TREE))
 
 init-objs := $(if $(wildcard $(srctree)/$(src)/$(hw-platform-y)/ps7_init_gpl.c),\
--- /dev/null
+++ b/board/xilinx/zynq/myir_init.c
@@ -0,0 +1,283 @@
+#include <common.h>
+#include <asm/io.h>
+#include <fdtdec.h>
+#include <fpga.h>
+#include <mmc.h>
+#include <netdev.h>
+#include <zynqpl.h>
+#include <asm/arch/hardware.h>
+#include <asm/arch/sys_proto.h>
+
+#define GPIO_CTRL_BASE		0xE000A000
+#define SLCR_LOCKSTA		(ZYNQ_SYS_CTRL_BASEADDR + 0x0000000C)
+#define I2C_RST_CTRL		(ZYNQ_SYS_CTRL_BASEADDR + 0x00000224)
+
+struct gpio_ctrl_s {
+	u32 mask_data_0_l;
+	u32 mask_data_0_m;
+	u32 mask_data_1_l;
+	u32 mask_data_1_m;
+	u32 mask_data_2_l;
+	u32 mask_data_2_m;
+	u32 mask_data_3_l;
+	u32 mask_data_3_m;
+
+	u32 reserved1[8];
+
+	u32 data_0;
+	u32 data_1;
+	u32 data_2;
+	u32 data_3;
+
+	u32 reserved2[4];
+
+	u32 data_0_ro;
+	u32 data_1_ro;
+	u32 data_2_ro;
+	u32 data_3_ro;
+
+	u32 reserved3[101];
+
+	u32 dirm_0;
+	u32 oen_0;
+	u32 int_mask_0;
+	u32 int_en_0;
+	u32 int_dis_0;
+	u32 int_stat_0;
+	u32 int_type_0;
+	u32 int_pol_0;
+	u32 int_any_0;
+
+	u32 reserved4[7];
+
+	u32 dirm_1;
+	u32 oen_1;
+	u32 int_mask_1;
+	u32 int_en_1;
+	u32 int_dis_1;
+	u32 int_stat_1;
+	u32 int_type_1;
+    u32 int_pol_1;
+    u32 int_any_1;
+
+	u32 reserved5[7];
+
+    u32 dirm_2;
+    u32 oen_2;
+    u32 int_mask_2;
+    u32 int_en_2;
+    u32 int_dis_2;
+    u32 int_stat_2;
+    u32 int_type_2;
+    u32 int_pol_2;
+    u32 int_any_2;
+
+	u32 reserved6[7];
+
+    u32 dirm_3;
+    u32 oen_3;
+    u32 int_mask_3;
+    u32 int_en_3;
+    u32 int_dis_3;
+    u32 int_stat_3;
+    u32 int_type_3;
+    u32 int_pol_3;
+    u32 int_any_3;
+};
+
+#define gpio_base	((struct gpio_ctrl_s *)GPIO_CTRL_BASE)
+
+#define GPIO_OUTPUT_1V8_CONFIG	( (1 << 13) | /* disable rcvr */     \
+								  (0 << 12) | /* disable pullup */  \
+								  (1 << 9)  | /* io voltage 1.8v */ \
+								  (0 << 8)  | /* slow CMOS edge */  \
+								  (0 << 1)  | /* L0_SEL/L1_SEL/L2_SEL/L3_SEL set to 0 to GPIO MUX */  \
+								  (0 << 0)    /* disable tri-state */ \
+								)
+
+#define GPIO_OUTPUT_3V3_CONFIG  ( (1 << 13) | /* disable rcvr */    \
+                                  (0 << 12) | /* disable pullup */  \
+                                  (3 << 9)  | /* io voltage 3.3v */ \
+                                  (0 << 8)  | /* slow CMOS edge */  \
+                                  (0 << 1)  | /* L0_SEL/L1_SEL/L2_SEL/L3_SEL set to 0 to GPIO MUX */ \
+                                  (0 << 0)    /* disable tri-state */ \
+								)
+								
+#define MAX_GPIO		54
+#define GPIO_BANK0      0
+#define GPIO_BANK1      1
+#define GET_GPIO_BANK(gpio)		(gpio<32? GPIO_BANK0: GPIO_BANK1)
+#define GET_GPIO_PIN(gpio)		(gpio % 32)
+
+/* MIO51 */
+#define MYIR_RESET_PIN	51
+
+#define is_slcr_lock()	(readl(SLCR_LOCKSTA)&0x1)
+
+static void gpio_set_value(u32 gpio, u32 value)
+{
+    u32 regval;
+	u32 *reg;
+	u32 pin;
+
+	value = !!value;
+	pin = GET_GPIO_PIN(gpio);
+
+	switch (GET_GPIO_BANK(gpio)) {
+		case GPIO_BANK0:
+			if (pin < 16) {
+				reg = &gpio_base->mask_data_0_l;
+			} else {
+				reg = &gpio_base->mask_data_0_m;
+			}
+			break;
+		case GPIO_BANK1:
+            if (pin < 16) {
+                reg = &gpio_base->mask_data_1_l;
+            } else {
+                reg = &gpio_base->mask_data_1_m;
+            }
+			break;
+		default:
+			printf("Invalid GPIO BANK %d (should be in range of [0,1])\n",
+				GET_GPIO_BANK(gpio));
+			return;
+	}
+
+	pin %= 16;
+
+    /* set MASK value */
+    regval = (~(1 << pin)) << 16;
+
+    /* set DATA value */
+    regval |= (value << pin);
+
+    /* Write to MASK_DATA_X_X register */
+    writel(regval, reg);
+}
+
+#if 0
+static u32 gpio_get_value(u32 gpio)
+{
+	u32 value = 0;
+
+	if (gpio >= MAX_GPIO) {
+		printf("gpio %d out of range (< %d)!\n", gpio, MAX_GPIO);
+		return 0;
+	}
+
+	switch(GET_GPIO_BANK(gpio)) {
+		case GPIO_BANK0:
+			value = readl(&gpio_base->data_0_ro) & (1<<GET_GPIO_PIN(gpio));
+			break;
+		case GPIO_BANK1:
+			value = readl(&gpio_base->data_1_ro) & (1<<GET_GPIO_PIN(gpio));
+			break;
+	}
+
+	return !!value;
+}
+#endif
+
+static void gpio_set_output(u32 gpio, u32 value)
+{
+	u32 bank = GET_GPIO_BANK(gpio);
+	u32 pin = GET_GPIO_PIN(gpio);
+	u32 *reg_dirm, *reg_oen;
+	u32 slcr_locksta;
+	
+	if (gpio >= MAX_GPIO) {
+		printf("gpio out of range (should be < %d)!\n", MAX_GPIO);
+		return ;
+	}
+
+	slcr_locksta = is_slcr_lock();
+	if (slcr_locksta)
+		zynq_slcr_unlock();
+
+	/* set pinmux to GPIO */
+	writel(GPIO_OUTPUT_1V8_CONFIG, &slcr_base->mio_pin[gpio]);
+
+	if (slcr_locksta)
+		zynq_slcr_lock();
+		
+	/* set GPIO to output */
+	switch (bank) {
+		case GPIO_BANK0:
+			reg_dirm = &gpio_base->dirm_0;
+			reg_oen = &gpio_base->oen_0;
+			break;
+		case GPIO_BANK1:
+			reg_dirm = &gpio_base->dirm_1;
+            reg_oen = &gpio_base->oen_1;
+			break;
+	}
+
+	writel(readl(reg_dirm) | (1 << pin), reg_dirm);
+	writel(readl(reg_oen) | (1 << pin), reg_oen);
+	
+	/* set to required value */
+	gpio_set_value(gpio, value);
+}
+
+/* 
+ * Init MIO51(bank1) for reset control pin
+ */
+static void gpio_init(void)
+{
+	gpio_set_output(MYIR_RESET_PIN, 0);
+}
+
+/*
+ * Reset I2C0 and I2C1 controller
+ */
+static void reset_i2c(void)
+{
+	volatile int i = 0;
+	u32 slcr_locksta;
+
+	slcr_locksta = is_slcr_lock();
+	if (slcr_locksta)
+		zynq_slcr_unlock();
+	
+	writel(0x3, I2C_RST_CTRL);
+	for (i = 0; i < 100; i++);
+	writel(0x0, I2C_RST_CTRL);
+
+
+	if (slcr_locksta)
+		zynq_slcr_lock();
+}
+
+/*
+ * Z-turn (MYS-XC7Z010) board init function.
+ */
+int myir_board_init(void)
+{
+	printf("%s\n", __func__);
+
+	gpio_init();
+
+//	printf(">> get gpio %d: %d\n", MYIR_RESET_PIN, gpio_get_value(MYIR_RESET_PIN));
+
+	/* Reset Ethernet PHY and USB PHY here */
+	gpio_set_value(MYIR_RESET_PIN, 0);
+	mdelay(100);
+	gpio_set_value(MYIR_RESET_PIN, 1);
+	#if 0
+	mdelay(50); /* bootdelay = 0Ê±,ÑÓÊ±50msÍø¿ÚÐ¾Æ¬ÓÐÊ±¸´Î»²»Õý³£ */
+	#else
+	mdelay(300);
+	#endif
+
+//    printf("<< get gpio %d: %d\n", MYIR_RESET_PIN, gpio_get_value(MYIR_RESET_PIN));
+
+	/*
+	 * Reset i2c controller after driving MYIR_RESET_PIN
+	 * It seems to be a hardware bug of zynq.
+	 */
+	reset_i2c();
+	
+	return 0;
+}
+
--- a/cmd/misc.c
+++ b/cmd/misc.c
@@ -64,4 +64,77 @@
 	"start - Reset the timer reference.\n"
 	"timer get   - Print the time since 'start'."
 );
+
 #endif
+
+#define	ZYNQ_7Z010	0x02
+#define	ZYNQ_7Z015	0x1b
+#define	ZYNQ_7Z020	0x07
+
+static int do_get_bitstream_name(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	ulong device_code;
+	
+	device_code = (*((volatile ulong *)0xF8000530) >> 12) & 0x1f;
+
+	switch(device_code) {
+	case ZYNQ_7Z010:
+		return setenv("bitstream_image", "7z010.bit");
+		
+	case ZYNQ_7Z015:
+		return setenv("bitstream_image", "7z015.bit");
+
+	case ZYNQ_7Z020:
+		return setenv("bitstream_image", "7z020.bit");
+		
+	default:
+		break;
+	}
+
+	return 1;
+}
+
+
+U_BOOT_CMD(
+	get_bitstream_name, 1, 0, do_get_bitstream_name, 
+	"get bitstream name according to device code",
+	"get_bitstream_name");
+
+static int do_qspi_get_bitsize(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	int rc;
+	u32 bitsize;
+	u32 addr;
+	char cmd_buf[128];
+	
+	if (argc != 2)
+		return cmd_usage(cmdtp);
+
+	addr = 0x200000;
+	snprintf(cmd_buf, sizeof(cmd_buf), "sf read 0x%x %s 4", addr, argv[1]);
+	rc = run_command(cmd_buf, 0);
+	if (rc) {
+		printf("%s err: %d\n\r", cmd_buf, rc);
+		return 1;
+	}
+
+	bitsize = *((volatile u32 *)addr);
+	rc = setenv_hex("bitsize", bitsize);
+	if (rc) {
+		printf("set bitsize err: %d\n\r", rc);
+		return 1;
+	}
+	
+	return 0;
+}
+
+
+U_BOOT_CMD(
+	qspi_get_bitsize, 2, 0, do_qspi_get_bitsize, 
+	"get bitstream size from qspi addr",
+	"qspi_get_bitsize bitsize_addr"
+);
+
+
+
+
--- a/include/configs/zynq_zturn.h
+++ b/include/configs/zynq_zturn.h
@@ -15,7 +15,7 @@
 
 #define CONFIG_ZYNQ_USB
 #define CONFIG_ZYNQ_SDHCI0
-
+/*
 #ifndef CONFIG_EXTRA_ENV_SETTINGS
 #define CONFIG_EXTRA_ENV_SETTINGS	\
 	"ethaddr=00:0a:35:00:01:22\0"	\
@@ -121,9 +121,170 @@
 		"bootm ${kernel_load_address} ${ramdisk_load_address} ${devicetree_load_address}\0" \
 		DFU_ALT_INFO
 #endif
-
+*/
 #include <configs/zynq-common.h>
 
+/*
+ * QSPI flash mapping
+ *
+ *   start       end      size     name
+ * ---------------------------------------
+ * 0x000000 - 0x080000  0x080000  boot.bin(512KB)
+ * 0x080000 - 0x0A0000  0x020000  bootenv(128KB)
+ * 0x0A0000 - 0x500000  0x460000  bitstream(4.375MB)
+ * 0x500000 - 0x980000  0x480000  uImage(4.5MB)
+ * 0x980000 - 0x990000  0x010000  devicetree(64KB)
+ * 0x990000 - 0xF90000  0x600000  ramdisk(6MB)
+ * 0xF90000 - 0xFFFFFF  0x070000  data(448KB)
+ */
+
+#undef CONFIG_ENV_OFFSET
+#define CONFIG_ENV_OFFSET		0x080000
+#undef CONFIG_ENV_SIZE
+#define CONFIG_ENV_SIZE			(128*1024)
+#undef CONFIG_ENV_SECT_SIZE
+#define CONFIG_ENV_SECT_SIZE 	(4*1024) // W25Q128 is 4KB sector type
+
+#define CONFIG_IPADDR	192.168.1.55
+#define CONFIG_SERVERIP	192.168.1.13
+#undef CONFIG_EXTRA_ENV_SETTINGS
+#define CONFIG_EXTRA_ENV_SETTINGS	\
+	"qboot_addr=0x000000\0" \
+	"qbootenv_addr=0x080000\0" \
+	"qbootenv_size=0x020000\0" \
+	"qkernel_addr=0x500000\0" \
+	"qdevtree_addr=0x980000\0" \
+	"qramdisk_addr=0x990000\0" \
+	"kernel_size=0x480000\0"	\
+	"devicetree_size=0x010000\0"	\
+	"ramdisk_size=0x600000\0"	\
+	"boot_size=0x080000\0"	\
+	"ethaddr=00:0a:35:00:01:22\0"	\
+	"kernel_image=uImage\0"	\
+	"kernel_load_address=0x2080000\0" \
+	"ramdisk_image=uramdisk.image.gz\0"	\
+	"ramdisk_load_address=0x4000000\0"	\
+	"devicetree_image=devicetree.dtb\0"	\
+	"devicetree_load_address=0x2000000\0"	\
+	"bitstream_image=system.bit.bin\0"	\
+	"boot_image=BOOT.bin\0"	\
+	"loadbit_addr=0x100000\0"	\
+	"loadbootenv_addr=0x2000000\0" \
+	"fdt_high=0x20000000\0"	\
+	"initrd_high=0x20000000\0"	\
+	"bootenv=uEnv.txt\0" \
+	"loadbootenv=fatload mmc 0 ${loadbootenv_addr} ${bootenv}\0" \
+	"importbootenv=echo Importing environment from SD ...; " \
+		"env import -t ${loadbootenv_addr} $filesize\0" \
+	"mmc_loadbit_fat=echo Loading bitstream from SD/MMC/eMMC to RAM.. && " \
+		"get_bitstream_name && mmcinfo && " \
+		"fatload mmc 0 ${loadbit_addr} ${bitstream_image} && " \
+		"fpga loadb 0 ${loadbit_addr} ${filesize}\0" \
+	"norboot=echo Copying Linux from NOR flash to RAM... && " \
+		"cp.b 0xE2100000 ${kernel_load_address} ${kernel_size} && " \
+		"cp.b 0xE2600000 ${devicetree_load_address} ${devicetree_size} && " \
+		"echo Copying ramdisk... && " \
+		"cp.b 0xE2620000 ${ramdisk_load_address} ${ramdisk_size} && " \
+		"bootm ${kernel_load_address} ${ramdisk_load_address} ${devicetree_load_address}\0" \
+	"uenvboot=" \
+		"if run loadbootenv; then " \
+			"echo Loaded environment from ${bootenv}; " \
+			"run importbootenv; " \
+		"fi; " \
+		"if test -n $uenvcmd; then " \
+			"echo Running uenvcmd ...; " \
+			"run uenvcmd; " \
+		"fi\0" \
+	"sdboot=if mmcinfo; then " \
+			"run uenvboot; " \
+			"get_bitstream_name && " \
+			"echo - load ${bitstream_image} to PL... && " \
+			"fatload mmc 0 0x200000 ${bitstream_image} && " \
+			"fpga loadb 0 0x200000 ${filesize} && " \
+			"echo Copying Linux from SD to RAM... && " \
+			"fatload mmc 0 ${kernel_load_address} ${kernel_image} && " \
+			"fatload mmc 0 ${devicetree_load_address} ${devicetree_image} && " \
+			"bootm ${kernel_load_address} - ${devicetree_load_address}; " \
+		"fi\0" \
+	"usbboot=if usb start; then " \
+			"run uenvboot; " \
+			"echo Copying Linux from USB to RAM... && " \
+			"fatload usb 0 ${kernel_load_address} ${kernel_image} && " \
+			"fatload usb 0 ${devicetree_load_address} ${devicetree_image} && " \
+			"fatload usb 0 ${ramdisk_load_address} ${ramdisk_image} && " \
+			"bootm ${kernel_load_address} ${ramdisk_load_address} ${devicetree_load_address}; " \
+		"fi\0" \
+	"nandboot=echo Copying Linux from NAND flash to RAM... && " \
+		"nand read ${kernel_load_address} 0x100000 ${kernel_size} && " \
+		"nand read ${devicetree_load_address} 0x600000 ${devicetree_size} && " \
+		"echo Copying ramdisk... && " \
+		"nand read ${ramdisk_load_address} 0x620000 ${ramdisk_size} && " \
+		"bootm ${kernel_load_address} ${ramdisk_load_address} ${devicetree_load_address}\0" \
+	"jtagboot=echo TFTPing Linux to RAM... && " \
+		"tftpboot ${kernel_load_address} ${kernel_image} && " \
+		"tftpboot ${devicetree_load_address} ${devicetree_image} && " \
+		"tftpboot ${ramdisk_load_address} ${ramdisk_image} && " \
+		"bootm ${kernel_load_address} ${ramdisk_load_address} ${devicetree_load_address}\0" \
+	"rsa_norboot=echo Copying Image from NOR flash to RAM... && " \
+		"cp.b 0xE2100000 0x100000 ${boot_size} && " \
+		"zynqrsa 0x100000 && " \
+		"bootm ${kernel_load_address} ${ramdisk_load_address} ${devicetree_load_address}\0" \
+	"rsa_nandboot=echo Copying Image from NAND flash to RAM... && " \
+		"nand read 0x100000 0x0 ${boot_size} && " \
+		"zynqrsa 0x100000 && " \
+		"bootm ${kernel_load_address} ${ramdisk_load_address} ${devicetree_load_address}\0" \
+	"rsa_qspiboot=echo Copying Image from QSPI flash to RAM... && " \
+		"sf probe 0 0 0 && " \
+		"sf read 0x100000 0x0 ${boot_size} && " \
+		"zynqrsa 0x100000 && " \
+		"bootm ${kernel_load_address} ${ramdisk_load_address} ${devicetree_load_address}\0" \
+	"rsa_sdboot=echo Copying Image from SD to RAM... && " \
+		"fatload mmc 0 0x100000 ${boot_image} && " \
+		"zynqrsa 0x100000 && " \
+		"bootm ${kernel_load_address} ${ramdisk_load_address} ${devicetree_load_address}\0" \
+	"rsa_jtagboot=echo TFTPing Image to RAM... && " \
+		"tftpboot 0x100000 ${boot_image} && " \
+		"zynqrsa 0x100000 && " \
+		"bootm ${kernel_load_address} ${ramdisk_load_address} ${devicetree_load_address}\0" \
+	"qspiboot=echo Copying Linux from QSPI flash to RAM... && " \
+		"sf probe 0 0 0 && " \
+		"qspi_get_bitsize 0x0A0000 && " \
+		"sf read ${loadbit_addr} 0x0A0004 ${bitsize} && " \
+		"fpga loadb 0 ${loadbit_addr} ${bitsize} && " \
+		"sf read ${kernel_load_address} ${qkernel_addr} ${kernel_size} && " \
+		"sf read ${devicetree_load_address} ${qdevtree_addr} ${devicetree_size} && " \
+		"echo Copying ramdisk... && " \
+		"sf read ${ramdisk_load_address} ${qramdisk_addr} ${ramdisk_size} && " \
+		"bootm ${kernel_load_address} ${ramdisk_load_address} ${devicetree_load_address}\0" \
+	"qspiupdate=echo Update qspi images from sd card... && " \
+		"echo - Init mmc... && mmc rescan && " \
+		"echo - Init qspi flash... && sf probe 0 0 0 && " \
+		"echo - Write boot.bin... && " \
+		"fatload mmc 0 0x200000 boot.bin && " \
+		"sf erase ${qboot_addr} ${boot_size} && " \
+		"sf erase ${qbootenv_addr} ${qbootenv_size} && " \
+		"sf write 0x200000 0 ${filesize} && " \
+		"get_bitstream_name && " \
+		"echo - Write ${bitstream_image}... && " \
+		"fatload mmc 0 0x200000 ${bitstream_image} && " \
+		"sf erase 0x0A0000 0x460000 && " \
+		"mw.l 0x100000 ${filesize} && " \
+		"sf write 0x100000 0x0A0000 4 && " \
+		"sf write 0x200000 0x0A0004 ${filesize} && " \
+		"echo - Write uImage... && " \
+		"fatload mmc 0 0x200000 uImage && " \
+		"sf erase ${qkernel_addr} ${kernel_size} && " \
+		"sf write 0x200000 ${qkernel_addr} ${filesize} && " \
+		"echo - Write device tree... && " \
+		"fatload mmc 0 0x200000 devicetree.dtb && " \
+		"sf erase ${qdevtree_addr} ${devicetree_size} && " \
+		"sf write 0x200000 ${qdevtree_addr} ${filesize} && " \
+		"echo - Write Ramdisk... && " \
+		"fatload mmc 0 0x200000 uramdisk.image.gz && " \
+		"sf erase ${qramdisk_addr} ${ramdisk_size} && " \
+		"sf write 0x200000 ${qramdisk_addr} ${filesize} && " \
+		"echo - Done.\0"
+
 #define CONFIG_BOOTARGS "console=ttyPS0,115200 root=/dev/mmcblk0p2 rootfstype=ext4 rw earlyprintk"
 
 #endif /* __CONFIG_ZYNQ_ZED_H */
